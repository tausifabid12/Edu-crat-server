import { createRequire } from "module";
const require = createRequire(import.meta.url);
import { ApolloServer } from '@apollo/server';
import { startStandaloneServer } from '@apollo/server/standalone';
const { Neo4jGraphQL } = require("@neo4j/graphql");
const neo4j = require('neo4j-driver');
// import {typeDefs} from './schema/type_defs.js';
import * as fs from 'fs';
// import{ resolvers} from './schema/resolvers.js';
import dotenv from 'dotenv';
dotenv.config();
const port = parseInt(process.env.PORT) || 4000;
// DB connection
const uri = process.env.DB_URI;
const user = process.env.DB_USER;
const password = process.env.DB_PASSWORD;
const driver = neo4j.driver(uri, neo4j.auth.basic(user, password));
if (!driver)
    throw new Error("DB connection failed");
else {
    console.log("DB connected");
}
//exporting session
export const session = driver.session({ database: 'neo4j' });
if (session)
    console.log("Session created");
// Read the schema file from current directory, join directory path and file name
const schemaFileName = 'schema.gql';
const schemaFilePath = `src/schema/${schemaFileName}`;
let schemaString = fs.readFileSync(schemaFilePath, 'utf8');
// Modify the regular expression 
schemaString = schemaString.replace(/type (\w+)!/g, (match, nodeName) => {
    return `type ${nodeName}`;
});
schemaString = schemaString.replace(/]! @relationship\(type: "[^"]+", direction: IN\)/g, (match, obj) => {
    return `!${match}`;
});
const typeDefs = schemaString;
// const typeDefsWithAutoGeneratedId= typeDefs.replace(/id:\s*String!\s*@unique/g, 'id: ID! @id(autogenerate: true)');
const schema = typeDefs.replace("id: String! @unique", "id: ID! @id(autogenerate: true)");
const neoSchema = new Neo4jGraphQL({ typeDefs, driver });
neoSchema.getSchema().then(async (schema) => {
    const server = new ApolloServer({
        schema,
        introspection: true,
    });
    const { url } = await startStandaloneServer(server, { listen: { port: port } });
    console.log(`ðŸš€ Server listening at: ${url}`);
});
function gql(schemaString) {
    throw new Error("Function not implemented.");
}
